pipeline {

   agent none
    options { skipDefaultCheckout()
             skipStagesAfterUnstable()
   }
         parameters
         {
choice(choices: 'NO\nYES', description: 'Build', name: 'Build')
choice(choices: 'NO\nYES', description: 'Deploy', name: 'Deploy')
        #choice(name: 'Environment', choices: 'QA\nUAT', description: 'Pass the environment')
        string(name: 'branch', defaultValue: 'master', description: 'Enter Branch Name')
        string(name: 'Deploy_Server', defaultValue: '0.0.0.0', description: 'Please enter the deployment Server details')
        string(name: 'EMAIL_LIST', defaultValue: '',description: 'Please enter the email list details')
}
        environment {
   
        STASH_URL ='git@github.com:janani01/git_test.git'
        GIT_CredentialsId=''
       
        Fortify_GIT_PROJECT='CMB.VVOV.asyncupdateservice.Fortify-A.Build'
            }
       
   stages {
     
 
 stage('Initialize') {
      when {
                expression {  params.Build == 'YES' }
            }

agent{
docker{
               image 'oneartifactory.verizon.com:8090/vcm/vvov/jdk/jdk17mvn:cmbcm01'
  label 'CMB_D53'
  }
               }
steps {
            checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '$branch']], doGenerateSubmoduleConfigurations: false, extensions: [], gitTool: 'Default', submoduleCfg: [], userRemoteConfigs: [[credentialsId: '29418eca-7d2c-43e1-b66e-6965f809ceed', url: 'git@gitlab.verizon.com:VVOV_SSPOrdering/asyncupdateservice.git']]]
            sh 'mvn -s /root/.m2/settings.xml -X clean install'
sh '''
                  echo ${ipaddress}
 mkdir -p target/files
 cp -p asyncupdateear/target/SSP_OS_AsyncUpdateService_itw_103.ear target/files/SSP_OS_AsyncUpdateService_itw_103.ear
                  cp -p asyncupdate.client/target/SSP_OS_AsyncUpdateService_Client.jar target/files/SSP_OS_AsyncUpdateService_Client.jar
'''
script {
          def SERVER_ID = "1823203773@1440422770951"
          def server = Artifactory.server "${SERVER_ID}"
          def uploadSpec = """{
            "files": [
              {
                "pattern": "target/files//*.*",
                "target": "VVO_SSPOrdering/"
              }
            ]
          }"""
          echo uploadSpec
          server.upload(uploadSpec)
 }
          stash name: "first-stash", includes: "target/files/*"
          hygieiaBuildPublishStep buildStatus: 'Success'
      deleteDir()
      }
}
       }
   }

